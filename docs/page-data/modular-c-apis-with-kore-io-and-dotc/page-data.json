{"componentChunkName":"component---src-templates-post-jsx","path":"/modular-c-apis-with-kore-io-and-dotc","result":{"data":{"markdownRemark":{"html":"<h2 id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background</h2>\n<p>Most high performance network applications today are using event based approaches. See <a href=\"http://nginx.org/en/docs/events.html\">nginx</a> or <a href=\"http://docs.libuv.org/en/v1.x/design.html\">libuv for node.js</a> for some in depth detail.</p>\n<p>So when I stumbled across <a href=\"https://kore.io/\">kore.io</a> on the <a href=\"http://irishtechcommunity.com/\">irish tech community slack</a> channel and noticed it also <a href=\"https://www.gitbook.com/book/jorisvink/kore-doc/details\">used system events</a> I was intrigued and marked it for a closer look when I had time.\nAs I had a few hours spare recently I thought I would dive in and write up whatever I found. </p>\n<p><a href=\"https://kore.io/\">kore.io</a> is a library with support tools that provides HTTP/S, Websocket and task modules in c along with integration to postgresql.</p>\n<blockquote>\n<p>kore.io feels like express for c</p>\n</blockquote>\n<p>Possibly more significant is the 'composition' based approach. This design pattern is very accessible and gives kore.io the feel of 'express for c'.</p>\n<p>While the composability felt correct the lack of a defined module system looked like an opportunity for improvement. Then I remembered a project I contributed to about 3 years ago - <a href=\"https://github.com/substack/dotc\">dotc by James Haliday</a>. </p>\n<blockquote>\n<p>use node-style #require and #export directives in c! </p>\n</blockquote>\n<p>dotc is 'a c/c++ preprocessor that copies the semantics of node.js's module lookup algorithm without modifying anything else about the c language'</p>\n<p>So I looked into what would be involved to in using these two technologies together and the rest of this article is a sample helloworld to illustrate how this can be done.</p>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<p>I used FreeBSD for this tutorial but any recent *nix system should be OK but not Windows yet. You will also need <a href=\"https://gcc.gnu.org/\">gcc</a> and <a href=\"https://nodejs.org/\">node.js</a> installed.</p>\n<h2 id=\"install\" style=\"position:relative;\"><a href=\"#install\" aria-label=\"install permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#install\">Install </a></h2>\n<p>kore.io is simple to install. As per the instructions on the <a href=\"https://github.com/jorisvink/kore\">github page</a> clone the repo and build and make</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% git clone https://github.com/jorisvink/kore.git\n% cd kore\n% make\n# make install</code></pre></div>\n<p>As dotc is a node application it's a simple npm install.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% npm install -g dotc</code></pre></div>\n<h2 id=\"the-project\" style=\"position:relative;\"><a href=\"#the-project\" aria-label=\"the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Project</h2>\n<ul>\n<li>You can follow the steps below but the finished app is also <a href=\"https://github.com/No9/helloworld\">available here</a>.</li>\n<li>\n<p>First create a kore project and change directory to the project root</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% kore create helloworld\n% cd helloworld</code></pre></div>\n</li>\n<li>\n<p>dotc uses a preprocessor to parse the files and generate output. To facilitate this we are going to create a pre-process folder called <strong>pre</strong> to work in.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% mkdir pre</code></pre></div>\n</li>\n<li>\n<p>Now we need a base file to work from so we will move the stub in <code class=\"language-text\">src</code> to <code class=\"language-text\">pre</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% mv src/helloworld.c pre/helloworld.c</code></pre></div>\n</li>\n<li>With everything in place we are ready to build a module. Create a new file in pre called hello.c and add the following code. This will create our body and our response length and will export our function as a single call.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include &lt;string.h&gt;\n\n#export= hello \nvoid hello (char** body, int *body_len) {\n   char * msg = &quot;hello world&quot;;\n   *body = msg;\n   *body_len = strlen(msg);\n}</code></pre></div>\n<ul>\n<li>\n<p>Now we need to edit <code class=\"language-text\">pre/helloworld.c</code> so it looks like the following comments are included in the code for explanation. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include &lt;kore/kore.h&gt;\n#include &lt;kore/http.h&gt;</code></pre></div>\n</li>\n</ul>\n<p>// This exposes the function hello as h()</p>\n<h1 id=\"require-helloc-as-h\" style=\"position:relative;\"><a href=\"#require-helloc-as-h\" aria-label=\"require helloc as h permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>require \"./hello.c\" as h</h1>\n<p>// As we are going to compile this as a C++ project we need to make the page interface available.\nextern \"C\" {\nint page(struct http_request *);\n}</p>\n<p>int page(struct http_request *);</p>\n<p>int\npage(struct http<em>request *req)\n{\n// Set up the variables that hello() will set\nint len;\nchar * body;\n//call our aliased hello function\nh(&#x26;body, &#x26;len);\n//set the response.\nhttp</em>response(req, 200, body, 11);\nreturn (KORE<em>RESULT</em>OK);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* Now we have the files in place we need to precompile them using dotc. Notice we give the output a `.cpp` extension so it will compile it as a C++ project.</code></pre></div>\n<p>dotc pre ./pre/helloworld.c > ./src/helloworld.cpp</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* To finish we simply run kore which will build and run the code.</code></pre></div>\n<p>% kore run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* The service should now be available from [https://127.0.0.1:8888](https://127.0.0.1:8888). As it uses self signed certs you will have to accept the security exception before you can browse to it. But you can also `curl` it with the `-k` flag</code></pre></div>\n<p>curl -k <a href=\"https://127.0.0.1:8888/\">https://127.0.0.1:8888/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## Summary\n\nI hope you found this little sample interesting and can see the possibilities of writing a modular C API server.\nkore.io has a lot of potential and writing this tutorial has also introduced me to other features such as the embedding assets that I will write more about when I get some time.\n\n## Attribution \nThanks to [James Halliday](https://github.com/substack) not only for dotc but the banner at the top of this article and an just as much thanks to [Joris Vink](https://github.com/jorisvink) for kore.io. I&#39;ve enjoyed tinkering around \n  </code></pre></div>","timeToRead":4,"excerpt":"Background Most high performance network applications today are using event based approaches. See nginx or libuv for node.js for some in…","frontmatter":{"title":"Modular C APIs with kore.io and dotc","cover":"images/include.png","date":"2017-01-01","category":"tech","tags":["programming"],"author":"anton"},"fields":{"slug":"/modular-c-apis-with-kore-io-and-dotc"}},"prev":{"excerpt":"Following on from the previous post on modular C APIs for kore.io This post looks at using a Cloud Foundry…","frontmatter":{"title":"Introducing the kore.io Cloud Foundry build pack","cover":"images/koreio-bluemix.jpg","date":"2017-01-07"},"fields":{"slug":"/kore-io-on-bluemix-2"}},"next":{"excerpt":"Time: 30 minutes max if you already have a mobile development environment installed Introduction This is the…","frontmatter":{"title":"chromiumify #1","cover":"https://unsplash.it/1280/500/?random?BoldMage","date":"2016-12-29T15:27:19.000Z"},"fields":{"slug":"/chromiumify-1"}},"authors":{"edges":[{"node":{"uid":"anton","name":"Anton Whalley","image":"https://avatars2.githubusercontent.com/u/130940?s=460&v=4","url":"http://gatsbyjs.org/","bio":""}}]}},"pageContext":{"slug":"/modular-c-apis-with-kore-io-and-dotc","total":11,"prev":"/kore-io-on-bluemix-2","next":"/chromiumify-1"}}}