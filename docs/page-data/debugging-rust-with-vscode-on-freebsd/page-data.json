{"componentChunkName":"component---src-templates-post-jsx","path":"/debugging-rust-with-vscode-on-freebsd","result":{"data":{"markdownRemark":{"html":"<p>The following is a set of notes for installing VSCode on FreeBSD and getting a debugger up and running in a step by step guide. I thought I would share them in a full post as having a full IDE with syntax and error highlighting along with detailed in-context explanations has been really useful as I get to grips with Rust.\n<img src=\"./images/syntax.png\"></p>\n<p>If you find any errata then please <a href=\"https://twitter.com/dhigit9\">hit me up on twitter @dhigit9</a> and I will make the amendments.</p>\n<p>There are four points we will walk through and it should take ~30 minutes.</p>\n<ol>\n<li>Install Required Dependencies </li>\n<li>Setup Rust</li>\n<li>Install VSCode with Plugins</li>\n<li>Debug a Sample App</li>\n</ol>\n<h3 id=\"install-required-dependencies\" style=\"position:relative;\"><a href=\"#install-required-dependencies\" aria-label=\"install required dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install Required Dependencies</h3>\n<p>As root run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># pkg install chromium gconf2 gdb git bash</code></pre></div>\n<p>To explain a little about these pre-reqs:\nVSCode uses a lot of shared libraries from chromium so we need to add it. This should become less onerous as vscode/electon make it into ports but right now this is the state of affairs.\nIf you are using KDE then gconf2 is required.\nThis tutorial uses gdb as the default installation of lldb on FreeBSD doesn't have the required python scripting support enabled. It may be possible to build lldb with python support from ports but this would add significantly to the setup time.</p>\n<p>Finally we add bash to run the rustup scripts. </p>\n<h3 id=\"setup-rust\" style=\"position:relative;\"><a href=\"#setup-rust\" aria-label=\"setup rust permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup Rust</h3>\n<p>Rust can be set up from pkg with <code class=\"language-text\"># pkg install rust</code> But the Rust Language Server (RLS) components in VSCode depend on <a href=\"https://rustup.rs/\">rustup</a> so we are going to use that in this scenario.\nPlease feel free to download and audit the script if you are not comfortable running random scripts from the internet.</p>\n<p>I am also adding the default toolchain to be <code class=\"language-text\">nightly</code> as I will be using this in other tutorials but feel free to use <code class=\"language-text\">stable</code> if you would prefer.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly</code></pre></div>\n<p>We will also need to add the cargo bin folder to your path. There are a number of ways to do this but I prefer editing my cshrc in <code class=\"language-text\">% ~/.cshrc</code>\nUncomment the set path line and add <code class=\"language-text\">$HOME/.cargo/bin</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">set path = (/sbin /bin /usr/sbin /usr/bin /usr/local/sbin /usr/local/bin $HOME/bin /usr/local/lib/qt5/bin $HOME/.cargo/bin)</code></pre></div>\n<p>In order to get the code completion facilities with the rust plugins we should get the source and set up an environment variable to point to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% mkdir code\n% cd code\n% git clone https://github.com/rust-lang/rust.git\n% cd rust</code></pre></div>\n<p>Get the sha1 for the nightly build</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% rustc -V\nrustc 1.33.0-nightly (e40548bc4 2018-12-21)</code></pre></div>\n<p>Now reset the code so it's in sync with the build</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% git reset --hard e40548bc4\n% HEAD is now at e40548bc43 Auto merge of #56779 - adrian-budau:master, r=alexcrichton</code></pre></div>\n<p>Now we need to setup an environment variable in <code class=\"language-text\">~/.cshrc</code> as we did for PATH so the plugins  know where to find it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">setenv RUST_SRC_PATH $HOME/code/rust/src</code></pre></div>\n<p>Now refresh your environment</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% source ~/.cshrc</code></pre></div>\n<h3 id=\"install-vscode-with-plugins\" style=\"position:relative;\"><a href=\"#install-vscode-with-plugins\" aria-label=\"install vscode with plugins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install VSCode with Plugins</h3>\n<p>Builds of VSCode are supplied from here - <a href=\"https://github.com/prash-wghats/Electron-VSCode-Atom-For-FreeBSD/releases\">https://github.com/prash-wghats/Electron-VSCode-Atom-For-FreeBSD/releases</a></p>\n<p>I am using 1.26.0 on FreeBSD-12.0-RELEASE with no issues you can download it directly from <a href=\"https://github.com/prash-wghats/Electron-VSCode-Atom-For-FreeBSD/releases/download/vscode_v1.26.0/VSCode-freebsd-x64-1.26.0.tar.xz\">https://github.com/prash-wghats/Electron-VSCode-Atom-For-FreeBSD/releases/download/vscode_v1.26.0/VSCode-freebsd-x64-1.26.0.tar.xz</a></p>\n<p>Once the download has completed expand the file </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ tar xvf VSCode-freebsd-x64-1.26.0.tar.xz</code></pre></div>\n<p>Then link the binary to an executing folder in this example we use <code class=\"language-text\">$HOME/bin</code> as that was configured as part of the path config in the cargo setup. It's also called code as this is in my muscle memory from other operating systems.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% ln -s $HOME/VSCode-freebsd-x64-1.2.6.0/bin/code-oss ~/bin/code</code></pre></div>\n<p>Now start VSCode by running <code class=\"language-text\">% code</code> at a terminal.</p>\n<p>Click the plugin button <img src=\"https://i.ibb.co/bN4r8Zy/pluginbutton.png\" alt=\"PlugingButton\"> and search for RLS and install.\n<img src=\"https://i.ibb.co/tQLnhg7/buttons.png\" alt=\"RLS Screen\"></p>\n<p>Repeat this process by searching for Native Debug\n<img src=\"https://i.ibb.co/C6n02sP/native-debug.png\" alt=\"Native Debug Screen\"></p>\n<p>Click the reload button to Refresh VSCode.</p>\n<p>If everything is configured correctly you should be prompted to install the additional rust tooling by RLS.</p>\n<p>Now we are ready to debug some code.</p>\n<h3 id=\"debug-a-sample-app\" style=\"position:relative;\"><a href=\"#debug-a-sample-app\" aria-label=\"debug a sample app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debug a Sample App</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% cd ~/code\n% cargo init sampleapp\n% cd sampleapp\n% code .</code></pre></div>\n<p>Navigate to the main source and set a breakpoint\n<img src=\"https://i.ibb.co/Fqgf72M/setbreakpoint.png\" alt=\"Set a Breakpoint Screen\"></p>\n<p>Now open a command prompt <em>CTL + `</em> or navigate <em>View -> Terminal</em>\nand run <code class=\"language-text\">% cargo build</code>\nThis will create an executable at <code class=\"language-text\">./target/debug/sampleapp</code>\n<img src=\"https://i.ibb.co/yYYgx63/build.png\" alt=\"Build Screen\"></p>\n<p>Now we are ready to debug!</p>\n<p>Press <em>F5</em> or Click the <em>Debug -> Start Debug</em> menu</p>\n<p>You will be prompted to select and environment - choose GDB.</p>\n<p>You will then be asked to fill in the launch.json.\nYou can keep all the setting but point it too your debug build by setting the target to <code class=\"language-text\">./target/debug/sampleapp</code></p>\n<p>This is a full example.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        {\n            &quot;name&quot;: &quot;Debug&quot;,\n            &quot;type&quot;: &quot;gdb&quot;,\n            &quot;request&quot;: &quot;launch&quot;,\n            &quot;target&quot;: &quot;./target/debug/sampleapp&quot;,\n            &quot;cwd&quot;: &quot;${workspaceRoot}&quot;\n        }\n    ]\n}</code></pre></div>\n<p>If you save the file and press F5 again you should be dropped into the code at the breakpoint you created earlier with the call stack and more information available.\nThe right click context menu should also work for you too.</p>\n<p><img src=\"https://i.ibb.co/x8LHFH2/debugging.png\" alt=\"Breakpoint Screen\"></p>\n<p>That's all for now but I will be posting more things as I find them and write them up. </p>","timeToRead":5,"excerpt":"The following is a set of notes for installing VSCode on FreeBSD and getting a debugger up and running in a step by step guide. I thought I…","frontmatter":{"title":"Debugging Rust with VSCode on FreeBSD","cover":"images/debug-rust.png","date":"2018-12-28","category":"tech","tags":["programming","rust","freebsd"],"author":"anton"},"fields":{"slug":"/debugging-rust-with-vscode-on-freebsd"}},"prev":{"excerpt":"Introduction Go straight to the code Today I was working on a project that required extending with 5 new REST…","frontmatter":{"title":"Rapidly extend a Fastify app with automated API generation from LoopBack","cover":"./images/cover.png","date":"2019-07-28"},"fields":{"slug":"/rapidly-extend-a-fastify-app-with-crud-apis-from-loopback"}},"next":{"excerpt":"Motivation A few months ago I was talking to nomadlogicLA on twitter about managing node.js processes on FreeBSD…","frontmatter":{"title":"Post Mortem debugging for node.js on FreeBSD","cover":"./images/post-mortem-freebsd.png","date":"2017-08-15"},"fields":{"slug":"/post-mortem-debugging-for-node-js-on-freebsd"}},"authors":{"edges":[{"node":{"uid":"anton","name":"Anton Whalley","image":"https://avatars2.githubusercontent.com/u/130940?s=460&v=4","url":"http://gatsbyjs.org/","bio":""}}]}},"pageContext":{"slug":"/debugging-rust-with-vscode-on-freebsd","total":11,"prev":"/rapidly-extend-a-fastify-app-with-crud-apis-from-loopback","next":"/post-mortem-debugging-for-node-js-on-freebsd"}}}