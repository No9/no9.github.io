{"componentChunkName":"component---src-templates-post-jsx","path":"/kore-io-on-bluemix-2","result":{"data":{"markdownRemark":{"html":"<p>Following on from the previous post on <a href=\"http://venshare.com/modular-c-apis-with-kore-io-and-dotc/\">modular C APIs for kore.io</a> This post looks at using a <a href=\"https://en.wikipedia.org/wiki/Cloud_Foundry\">Cloud Foundry</a><sup>1</sup> approach to speed up the deployment of a <a href=\"https://www.kore.io\">kore.io</a> service.\nThe result will be a simple http server that sends an empty 200 HTTP response but it should illustrate the point of how easy it is to build and deploy a HTTP server in C.</p>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<p>You will need <a href=\"https://www.kore.io\">kore.io</a> installed on your machine and this article assumes you have access to a cloud foundry provider and your have the <code class=\"language-text\">cf</code> command line client installed.</p>\n<p>If kore isn't installed then you can follow the <a href=\"http://venshare.com/modular-c-apis-with-kore-io-and-dotc/#install\">instructions in the previous article</a>.\nFor a cloud foundry service you can set up a free account on <a href=\"https://console.ng.bluemix.net/registration/?target=%2Fdashboard%2Fapps\">Bluemix</a> (no credit card required) and a download for the <a href=\"https://github.com/cloudfoundry/cli/releases\"><strong>cf</strong> client here</a>. Any additional pointers you need for setting up the <strong>cf</strong> application are <a href=\"https://github.com/cloudfoundry/cli#downloads\">available here</a>.</p>\n<p>Once you have those three pieces this exercise should only take 5 minutes to do as there is zero code. </p>\n<h2 id=\"steps\" style=\"position:relative;\"><a href=\"#steps\" aria-label=\"steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps</h2>\n<p><strong>1. Set up a project folder</strong>\nAt the command prompt create a folder called hello-kore and change into it. All the commands in this how to will assume your are working from the hello-kore folder</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir hello-kore\n$ cd hello-kore</code></pre></div>\n<p><strong>2. Create a kore application</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ kore create worldapp</code></pre></div>\n<p>This creates a simple kore application in a folder called worldapp</p>\n<p><strong>3. Update the network settings</strong></p>\n<p>In your favourite editor open <code class=\"language-text\">worldapp/conf/worldapp.conf</code> and change the IP address from <code class=\"language-text\">127.0.0.1</code> to <code class=\"language-text\">0.0.0.0</code> to bind the app to all the network interfaces.</p>\n<p><strong>4. Update the build file for a single binary deployment</strong> </p>\n<p>Open <code class=\"language-text\">worldapp/conf/worldapp.conf</code> and change it to look like this. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">single_binary=yes\nkore_source=../../kore\nkore_flavor=NOTLS=1\n\n# The flags below are shared between flavors\ncflags=-Wall -Wmissing-declarations -Wshadow\ncflags=-Wstrict-prototypes -Wmissing-prototypes\ncflags=-Wpointer-arith -Wcast-qual -Wsign-compare\ncxxflags=-Wall -Wmissing-declarations -Wshadow\ncxxflags=-Wpointer-arith -Wcast-qual -Wsign-compare\n\nldflags=-lcrypto\n\ndev {\n}</code></pre></div>\n<p>We are basically enabling a production single binary build with a reference to the kore supplied in the buildpack with no transport level security <code class=\"language-text\">NOTLS</code> as that is provided the CF runtime.\nDue to some edge dependencies we have to supply <code class=\"language-text\">ldflags=-lcrypto</code> flag to the compilier.</p>\n<p><strong>5. Finally publish to cloud foundry with the following command</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cf push worldapp -b https://github.com/no9/kore-buildpack.git -c &quot;./worldapp/worldapp -rn&quot;</code></pre></div>\n<p>You should have an OK response at the end. Confirm the route to the host has been created with</p>\n<p><strong>6. Check the deployment</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cf routes\nspace   host     domain        apps\ndev     worldapp mybluemix.net worldapp\n....</code></pre></div>\n<p>With the route you can then test the end point with</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ curl -v https://URL_TO_ROUTE</code></pre></div>\n<p>In my case it was</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -v https://worldapp.mybluemix.net/</code></pre></div>\n<p>And it gave the output</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">........\n&lt; HTTP/1.1 200 OK\n&lt; X-Backside-Transport: OK OK\n&lt; Connection: Keep-Alive\n&lt; Transfer-Encoding: chunked\n&lt; Server: kore (2.1.0-devel)\n&lt; Strict-Transport-Security: max-age=31536000; includeSubDomains\n&lt; Date: Sat, 07 Jan 2017 01:23:40 GMT\n&lt; X-Global-Transaction-ID: 3516363111</code></pre></div>\n<p>Thats all for now next time we will look at creating a JSON request and response and exposing that on API Connect. </p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<p>This is a good hands on introduction to the internals of a cloud foundry application. <a href=\"https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/We0d917403ade_46b2_8991_d1eabb8126f6/page/Building%20your%20own%20Buildpack%20%28i.e.%20for%20C%29\">Building your own Buildpack (i.e. for C) - Fco.Ramos</a>\nThe buildpack I developed to support this deployment is available here <a href=\"https://github.com/No9/kore-buildpack\">https://github.com/No9/kore-buildpack</a></p>","timeToRead":3,"excerpt":"Following on from the previous post on modular C APIs for kore.io This post looks at using a Cloud Foundry1 approach to speed up the…","frontmatter":{"title":"Introducing the kore.io Cloud Foundry build pack","cover":"images/koreio-bluemix.jpg","date":"2017-01-07","category":"tech","tags":["programming","koreio","c"],"author":"anton"},"fields":{"slug":"/kore-io-on-bluemix-2"}},"prev":{"excerpt":"Most of my days are spent up to my knees thinking about APIs. But this week I was asked to build a person finder…","frontmatter":{"title":"Some notes on vue.js with browserify on bluemix","cover":"images/browserify-vue.png","date":"2017-04-19"},"fields":{"slug":"/vue-js-with-browserify-on-bluemix"}},"next":{"excerpt":"Background Most high performance network applications today are using event based approaches. See nginx or libuv…","frontmatter":{"title":"Modular C APIs with kore.io and dotc","cover":"images/include.png","date":"2017-01-01"},"fields":{"slug":"/modular-c-apis-with-kore-io-and-dotc"}},"authors":{"edges":[{"node":{"uid":"anton","name":"Anton Whalley","image":"https://avatars2.githubusercontent.com/u/130940?s=460&v=4","url":"http://gatsbyjs.org/","bio":""}}]}},"pageContext":{"slug":"/kore-io-on-bluemix-2","total":11,"prev":"/vue-js-with-browserify-on-bluemix","next":"/modular-c-apis-with-kore-io-and-dotc"}}}