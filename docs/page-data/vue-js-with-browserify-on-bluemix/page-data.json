{"componentChunkName":"component---src-templates-post-jsx","path":"/vue-js-with-browserify-on-bluemix","result":{"data":{"markdownRemark":{"html":"<p>Most of my days are spent up to my knees thinking about APIs. But this week I was asked to build a person finder app for work.</p>\n<p>I thought this would be a great opportunity to take <a href=\"https://vuejs.org/\">vue.js</a> for a spin and see if I could get it up and running in a dev flow I am comfortable with.</p>\n<p>What follows is really just notes I took on the way. I hope you find them useful.</p>\n<p>My preferred bundling tool is <a href=\"http://browserify.org/\">browserify</a> because it makes frontend work feel as much like node.js development as possible. So I looked around I noticed that there is a <a href=\"https://github.com/vuejs-templates/browserify\">prebuilt browserify template</a> for the <a href=\"https://github.com/vuejs/vue-cli\">vue.js command line interface</a>\nWhen I looked into the template I liked the way it was structured but the dependency on babel was too much for me. I am a little old school and if I was going to go for a language transpiler I would bite the whole bullet and use typescript.</p>\n<p>So I decided to turn down the magic dial and use the vuejs template but without the babelification of all the things.</p>\n<blockquote>\n<p>Turn down the magic dial</p>\n</blockquote>\n<p>So what follows is a step by step guide to setting up vue.js with browserify on Bluemix although it should be useful for anyone interested in browserify and vue.js in general.</p>\n<p>The source code for this tutorial is available <a href=\"https://github.com/No9/vuejs-browserify-bluemix.git\">here</a> and you can deploy the project into your bluemix account by clicking this button.</p>\n<p><a href=\"https://bluemix.net/deploy?repository=https://github.com/No9/vuejs-browserify-bluemix\"><img src=\"https://bluemix.net/deploy/button.png\" alt=\"Deploy to Bluemix\"></a></p>\n<h4 id=\"lets-install-the-toolchain\" style=\"position:relative;\"><a href=\"#lets-install-the-toolchain\" aria-label=\"lets install the toolchain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lets install the toolchain</h4>\n<p>What follows is the toolchain you will need and what each tool does.</p>\n<ul>\n<li>browserify - Lets you use node modules in the browser and take a require approach to development.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install browserify -s</code></pre></div>\n<ul>\n<li>\n<p>vueify - Transform view components into a single browserify file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install vueify --save-dev</code></pre></div>\n</li>\n</ul>\n<h4 id=\"setup-runtime-environment\" style=\"position:relative;\"><a href=\"#setup-runtime-environment\" aria-label=\"setup runtime environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup Runtime Environment</h4>\n<p>First thing we are going to do is create a node.js application on bluemix. Simply <a href=\"https://console.ng.bluemix.net/catalog/starters/sdk-for-nodejs?taxonomyNavigation=apps\">visit this link and click create</a></p>\n<p>Once this is complete got to the overview section and enable continuous delivery. This will create a github repository for you and will automatically deploy when you push to master.\n<img src=\"/content/images/2017/04/enable-deploy-tools.png\" alt=\"Enable Continuous Delivery\"></p>\n<p>Now we need to clone the github repo that you have just created as part of the enabling continuous integration. </p>\n<p>Once we have the project cloned we need to enable it for vuejs development. </p>\n<p>At the command prompt <code class=\"language-text\">cd</code> into the root of the cloned folder and install vue.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install vue -S</code></pre></div>\n<p>Now we need to install vueify as a developer dependency. This module that integrates vuejs with browserify.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install vueify -D</code></pre></div>\n<p>Install the node.js dependencies </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install</code></pre></div>\n<p>Create a folder called <code class=\"language-text\">src</code> and put in a simple <code class=\"language-text\">main.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// src/main.js\nvar Vue = require(&#39;vue&#39;)\nvar App = require(&#39;./app.vue&#39;)\n\nnew Vue({\n  el: &#39;#app&#39;,\n  render: function (createElement) {\n    return createElement(App)\n  }\n})</code></pre></div>\n<p>Now we update the public/index.html file in the public folder to use Vue</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html&gt;\n&lt;!-- index.html --&gt;\n&lt;html&gt;\n\n  &lt;head&gt;\n    &lt;title&gt;Line Manager Meetup&lt;/title&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/style.css&quot;&gt;\n    &lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n      &lt;script src=&quot;js/build.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n  &lt;script&gt;\n\n  &lt;/script&gt;\n&lt;/html&gt;</code></pre></div>\n<p>Create a view the file src/app.vue</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;style&gt;\n  .red {\n    color: #f00;\n  }\n&lt;/style&gt;\n\n&lt;template&gt;\n  &lt;h1 class=&quot;red&quot;&gt;{{msg}}&lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nmodule.exports = {\n  data () {\n    return {\n      msg: &#39;Hello world!&#39;\n    }\n  }\n}\n&lt;/script&gt;</code></pre></div>\n<p>Now that we have the files in place we need to compile them </p>\n<p>Update package.json for a dev build </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node app.js&quot;,\n\t&quot;dev&quot; : &quot;browserify -t vueify -e src/main.js -o public/js/build.js&quot;\n  },\n...</code></pre></div>\n<p>Create a folder in <code class=\"language-text\">public/js</code> this is where the output will go</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm run dev</code></pre></div>\n<p>If this gives you a successful build you should be able to run the local server. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node app</code></pre></div>\n<p>And browsing to the localhost address in the console output should give. </p>\n<p><img src=\"/content/images/2017/04/vueout.png\" alt=\"vue output\"></p>\n<p>In the next post I will setup the watchify piece for automatic page refreshes during development and what needs to be done to put the package in production. </p>","timeToRead":4,"excerpt":"Most of my days are spent up to my knees thinking about APIs. But this week I was asked to build a person finder app for work. I thought…","frontmatter":{"title":"Some notes on vue.js with browserify on bluemix","cover":"images/browserify-vue.png","date":"2017-04-19","category":"tech","tags":["programming","nodejs","vuejs"],"author":"anton"},"fields":{"slug":"/vue-js-with-browserify-on-bluemix"}},"prev":{"excerpt":"Motivation A few months ago I was talking to nomadlogicLA on twitter about managing node.js processes on FreeBSD…","frontmatter":{"title":"Post Mortem debugging for node.js on FreeBSD","cover":"./images/post-mortem-freebsd.png","date":"2017-08-15"},"fields":{"slug":"/post-mortem-debugging-for-node-js-on-freebsd"}},"next":{"excerpt":"Following on from the previous post on modular C APIs for kore.io This post looks at using a Cloud Foundry…","frontmatter":{"title":"Introducing the kore.io Cloud Foundry build pack","cover":"images/koreio-bluemix.jpg","date":"2017-01-07"},"fields":{"slug":"/kore-io-on-bluemix-2"}},"authors":{"edges":[{"node":{"uid":"anton","name":"Anton Whalley","image":"https://avatars2.githubusercontent.com/u/130940?s=460&v=4","url":"http://gatsbyjs.org/","bio":""}}]}},"pageContext":{"slug":"/vue-js-with-browserify-on-bluemix","total":11,"prev":"/post-mortem-debugging-for-node-js-on-freebsd","next":"/kore-io-on-bluemix-2"}}}