{"version":3,"sources":["webpack:///./src/components/AuthorThumbnail/AuthorThumbnail.jsx","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/templates/category.jsx"],"names":["AuthorThumbnail","render","this","props","avatar","name","className","src","alt","data-pin-nopin","React","Component","PostListing","postEdges","authorEdges","postList","postAuthors","map","postEdge","path","node","fields","slug","tags","frontmatter","cover","title","date","author","AuthorModel","getAuthor","SiteConfig","blogAuthorId","excerpt","timeToRead","post","post_class","PostFormatting","key","PostHeader","to","image","AuthorLink","url","uid","PostTags","prefix","PostDate","CategoryTemplate","category","pageContext","data","allMarkdownRemark","edges","authorsEdges","authors","location","config","siteTitle","pageQuery"],"mappings":"iKAoBeA,G,oGAhBbC,OAAA,WAAU,IAAD,EACkBC,KAAKC,MAAtBC,EADD,EACCA,OAAQC,EADT,EACSA,KAChB,OAAID,GAAUC,EAEV,yBACEC,UAAU,eACVC,IAAKH,EACLI,IAAKH,EACLI,iBAAe,SAId,M,GAbmBC,IAAMC,Y,6FCyB9BC,G,oGACJX,OAAA,WACE,IAlBiBY,EAAWC,EAkBtBC,GAlBWF,EAkBYX,KAAKC,MAAMU,UAlBZC,EAkBuBZ,KAAKC,MAAMa,YAjBhEH,EAAUI,KAAI,SAAAC,GAAQ,MAAK,CACzBC,KAAMD,EAASE,KAAKC,OAAOC,KAC3BC,KAAML,EAASE,KAAKI,YAAYD,KAChCE,MAAOP,EAASE,KAAKI,YAAYC,MACjCC,MAAOR,EAASE,KAAKI,YAAYE,MACjCC,KAAMT,EAASE,KAAKI,YAAYG,KAChCC,OAAQC,IAAYC,UAClBhB,EACAI,EAASE,KAAKI,YAAYI,OAC1BG,IAAWC,cAEbC,QAASf,EAASE,KAAKa,QACvBC,WAAYhB,EAASE,KAAKc,gBAO1B,OACE,6BAEGnB,EAASE,KAAI,SAAAkB,GAAS,IACbT,EAA6CS,EAA7CT,MAAOP,EAAsCgB,EAAtChB,KAAMc,EAAgCE,EAAhCF,QAASL,EAAuBO,EAAvBP,OAAQL,EAAeY,EAAfZ,KAAMI,EAASQ,EAATR,KACtCrB,EAAY6B,EAAKC,WAAaD,EAAKC,WAAa,OAEtD,OACE,kBAACC,EAAA,EAAD,CAAgB/B,UAAWA,EAAWgC,IAAKZ,GACzC,kBAACa,EAAA,EAAD,KACE,wBAAIjC,UAAU,cACZ,kBAAC,OAAD,CAAMkC,GAAIrB,GAAOO,KAGrB,6BAASpB,UAAU,gBAEjB,2BACG2B,EAAS,IACV,kBAAC,OAAD,CAAM3B,UAAU,YAAYkC,GAAIrB,GAAhC,OAKJ,4BAAQb,UAAU,aAChB,kBAAC,EAAD,CAAiBF,OAAQwB,EAAOa,MAAOpC,KAAMuB,EAAOvB,OACpD,kBAACqC,EAAA,EAAD,CAAYC,IAAG,WAAaf,EAAOgB,IAAOvC,KAAMuB,EAAOvB,OACvD,kBAACwC,EAAA,EAAD,CAAUC,OAAO,OAAOvB,KAAMA,IAC9B,kBAACwB,EAAA,EAAD,CAAUpB,KAAMA,W,GA/BNjB,IAAMC,YAyCjBC,O,0NC9DToC,E,0FACJ/C,OAAA,WACE,IAAMgD,EAAW/C,KAAKC,MAAM+C,YAAYD,SAClCpC,EAAYX,KAAKC,MAAMgD,KAAKC,kBAAkBC,MAC9CC,EAAepD,KAAKC,MAAMgD,KAAKI,QAAQF,MAC7C,OACE,kBAAC,IAAD,CAAQG,SAAUtD,KAAKC,MAAMqD,UAC3B,yBAAKlD,UAAU,sBACb,kBAAC,IAAD,CACEoB,MAAK,sBAAwBuB,EAAxB,OAAuCQ,IAAOC,YAErD,kBAAC,IAAD,CAAa7C,UAAWA,EAAWG,YAAasC,O,GAX3B5C,IAAMC,WAmBxBgD,EAAS,aAuCPX,a","file":"component---src-templates-category-jsx-c37d4c46313cb3c52dec.js","sourcesContent":["import React from \"react\";\nimport \"./AuthorThumbnail.css\";\n\nclass AuthorThumbnail extends React.Component {\n  render() {\n    const { avatar, name } = this.props;\n    if (avatar && name) {\n      return (\n        <img\n          className=\"author-thumb\"\n          src={avatar}\n          alt={name}\n          data-pin-nopin=\"true\"\n        />\n      );\n    }\n    return null;\n  }\n}\n\nexport default AuthorThumbnail;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport AuthorThumbnail from \"../AuthorThumbnail/AuthorThumbnail\";\nimport PostTags from \"../PostTags/PostTags\";\nimport SiteConfig from \"../../../data/SiteConfig\";\nimport AuthorLink from \"../AuthorLink/AuthorLink\";\nimport PostFormatting from \"../../components/PostFormatting/PostFormatting\";\nimport PostHeader from \"../../components/PostHeader/PostHeader\";\nimport PostDate from \"../PostDate/PostDate\";\nimport AuthorModel from \"../../models/author-model\";\nimport \"./PostListing.css\";\n\nconst getPostList = (postEdges, authorEdges) =>\n  postEdges.map(postEdge => ({\n    path: postEdge.node.fields.slug,\n    tags: postEdge.node.frontmatter.tags,\n    cover: postEdge.node.frontmatter.cover,\n    title: postEdge.node.frontmatter.title,\n    date: postEdge.node.frontmatter.date,\n    author: AuthorModel.getAuthor(\n      authorEdges,\n      postEdge.node.frontmatter.author,\n      SiteConfig.blogAuthorId\n    ),\n    excerpt: postEdge.node.excerpt,\n    timeToRead: postEdge.node.timeToRead\n  }));\n\nclass PostListing extends React.Component {\n  render() {\n    const postList = getPostList(this.props.postEdges, this.props.postAuthors);\n\n    return (\n      <div>\n        {/* This is the post loop - each post will be output using this markup */}\n        {postList.map(post => {\n          const { title, path, excerpt, author, tags, date } = post;\n          const className = post.post_class ? post.post_class : \"post\";\n\n          return (\n            <PostFormatting className={className} key={title}>\n              <PostHeader>\n                <h2 className=\"post-title\">\n                  <Link to={path}>{title}</Link>\n                </h2>\n              </PostHeader>\n              <section className=\"post-excerpt\">\n                {/* TODO limit excerpt to 26 words */}\n                <p>\n                  {excerpt}{\" \"}\n                  <Link className=\"read-more\" to={path}>\n                    &raquo;\n                  </Link>\n                </p>\n              </section>\n              <footer className=\"post-meta\">\n                <AuthorThumbnail avatar={author.image} name={author.name} />\n                <AuthorLink url={`/author/${author.uid}`} name={author.name} />\n                <PostTags prefix=\" on \" tags={tags} />\n                <PostDate date={date} />\n              </footer>\n            </PostFormatting>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport config from \"../../data/SiteConfig\";\nimport Layout from \"../components/layout\";\n\nclass CategoryTemplate extends React.Component {\n  render() {\n    const category = this.props.pageContext.category;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    const authorsEdges = this.props.data.authors.edges;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"category-container\">\n          <Helmet\n            title={`Posts in category \"${category}\" | ${config.siteTitle}`}\n          />\n          <PostListing postEdges={postEdges} postAuthors={authorsEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n    # authors\n    authors: allAuthorsJson {\n      edges {\n        node {\n          uid\n          name\n          image\n          url\n          bio\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryTemplate;\n"],"sourceRoot":""}